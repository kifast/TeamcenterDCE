# Make file to publish output.
#
# The following variables must be defined in commandline:
#	VERSION_BUILD_SHORT
#
# Example:
#	make -f Makefile.publish repo
#	make -f Makefile.publish sync


#
# Check for errors
#

OS=$(shell uname)

ifeq ($(PROJECT_NAME),)
  $(error PROJECT_NAME undefined.)
endif

ifeq ($(VERSION_STR),)
  $(error VERSION_STR undefined.)
endif

ifeq ($(VERSION_BUILD_SHORT),)
  $(error VERSION_BUILD_SHORT undefined.)
endif

ifeq ($(BUILD_DATE),)
  $(error BUILD_DATE undefined.)
endif

ifeq ($(NLPROJECTROOT),)
  $(error NLPROJECTROOT undefined.)
endif

ifeq ($(REPOSITORY_ROOT),)
  $(error REPOSITORY_ROOT undefined.)
endif

ifeq ($(RELEASE_ARTIFACTS_ROOT),)
  $(error RELEASE_ARTIFACTS_ROOT undefined.)
endif

#
# Constants
#

LOCAL_OUTPUT_DIR=$(NLPROJECTROOT)/tmp_output
LOCAL_WORK_DIR=$(NLPROJECTROOT)/tmp_work
LOCAL_XLIB_DIR=$(NLPROJECTROOT)/tmp_xlibs

ifeq ("$(OS)","Linux")
	BASE_DIR=Teamcenter/RightsManagementExtension/$(PROJECT_NAME)/$(VERSION_STR)_linux/$(VERSION_BUILD_SHORT)
	ZIP_FILE_NAME_BIN=$(PROJECT_NAME)-$(VERSION_STR)-$(VERSION_BUILD_SHORT)-$(BUILD_DATE)-linux.zip
	BUILD_OUTPUT_DIR=$(NLPROJECTROOT)/$(BUILDTYPE)
else
	BASE_DIR=Teamcenter/RightsManagementExtension/$(PROJECT_NAME)/$(VERSION_STR)/$(VERSION_BUILD_SHORT)
	ZIP_FILE_NAME_BIN=$(PROJECT_NAME)-$(VERSION_STR)-$(VERSION_BUILD_SHORT)-$(BUILD_DATE)-bin.zip
	BUILD_OUTPUT_DIR=$(NLPROJECTROOT)/Release
endif
REPOSITORY_BUILD_DIR=$(REPOSITORY_ROOT)/$(BASE_DIR)
RELEASE_ARTIFACTS_DIR=$(RELEASE_ARTIFACTS_ROOT)/$(BASE_DIR)

BUILD_MANIFEST_FILE_NAME=build.manifest
TC_BIN10=$(LOCAL_OUTPUT_DIR)/TC_BIN10
TC_BIN11=$(LOCAL_OUTPUT_DIR)/TC_BIN11
TC_BIN_LINUX=$(LOCAL_OUTPUT_DIR)/TC_BIN_LINUX
SCF_INTEGRATION_BIN=$(LOCAL_OUTPUT_DIR)/SCF

#
# Info
#

$(info --------------------------------------------------------------)
$(info PROJECT_NAME                   = $(PROJECT_NAME))
$(info VERSION_STR                    = $(VERSION_STR))
$(info VERSION_BUILD_SHORT            = $(VERSION_BUILD_SHORT))
$(info ZIP_FILE_NAME_BIN              = $(ZIP_FILE_NAME_BIN))
$(info REPOSITORY_BUILD_DIR           = $(REPOSITORY_BUILD_DIR))
$(info RELEASE_ARTIFACTS_DIR          = $(RELEASE_ARTIFACTS_DIR))
$(info LOCAL_WORK_DIR                 = $(LOCAL_WORK_DIR))
$(info LOCAL_OUTPUT_DIR               = $(LOCAL_OUTPUT_DIR))
$(info --------------------------------------------------------------)
$(info )


#
# Targets
#

.PHONY: all
all: archive

.PHONY: archive
ifeq ("$(OS)","Linux")
archive: archive_linux
else
archive: archive_tc11
endif
	@echo "Zipping distribution package..."
	cd $(LOCAL_OUTPUT_DIR);	zip -r "$(LOCAL_WORK_DIR)/$(ZIP_FILE_NAME_BIN)" .
	@echo "Copying distribution zip file to repository..."
	@if [ ! -d $(REPOSITORY_BUILD_DIR) ]; then	\
		mkdir -p $(REPOSITORY_BUILD_DIR) ;		\
	fi
	cp -rpf $(LOCAL_WORK_DIR)/$(ZIP_FILE_NAME_BIN) $(REPOSITORY_BUILD_DIR)
	ls -lR $(REPOSITORY_BUILD_DIR)
	@echo "Copying build artifacts to repository..."
	@if [ ! -d $(RELEASE_ARTIFACTS_DIR) ]; then	\
		mkdir -p $(RELEASE_ARTIFACTS_DIR) ;		\
	fi
	cp -rpf $(BUILD_OUTPUT_DIR)/* $(RELEASE_ARTIFACTS_DIR)
	ls -lR $(RELEASE_ARTIFACTS_DIR)


.PHONY: archive_tc11
archive_tc11:make_dir
	@echo "Archiving libraries for TC11_ROOT/bin"
	mkdir -p $(TC_BIN11)
	cp -pf $(NLPROJECTROOT)/Release/x64/tc11/bczModifier.exe $(TC_BIN11)/bczModifier.exe
	cp -pf $(NLPROJECTROOT)/Release/x64/tc11/nx_edit_references.exe $(TC_BIN11)/nx_edit_references.exe
	cp -pf $(NLPROJECTROOT)/Release/x64/tc11/NxlHook.dll $(TC_BIN11)/NxlHook.dll
	cp -pf $(NLPROJECTROOT)/Release/x64/tc11/XmlModifier.exe $(TC_BIN11)/XmlModifier.exe
	ls -l $(TC_BIN11)

#.PHONY: archive_linux
#archive_linux:make_dir
#	@echo "Archiving Linux libraries for TC_ROOT/bin"
#	mkdir -p $(TC_BIN_LINUX)
#	cp -pf $(NLPROJECTROOT)/$(BUILDTYPE)/linux/*.so $(TC_BIN_LINUX)
#	ls -l $(TC_BIN_LINUX)
#	gcc --version
#	ldd --version
#	nm -g $(TC_BIN_LINUX)/*.so | grep GLIBC
#	@if [ "`nm -g $(TC_BIN_LINUX)/*.so | grep GLIBC_2.14`" ]; then	\
#		grep "memcpy" tmp/*.s;	\
#		exit 1;	\
#	fi


.PHONY:make_dir
make_dir:
	@if [ ! -d $(LOCAL_OUTPUT_DIR) ]; then	\
		mkdir -p $(LOCAL_OUTPUT_DIR) ;		\
	fi
	@rm -rf $(LOCAL_OUTPUT_DIR)/*
	@if [ ! -d $(LOCAL_WORK_DIR) ]; then	\
		mkdir -p $(LOCAL_WORK_DIR) ;		\
	fi
	rm -rf $(LOCAL_WORK_DIR)/*
