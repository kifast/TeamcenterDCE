#!/bin/bash
#
# DESCRIPTION
#	This script generates a number of bash variables used in PCV and release build.
#
#	The main objective is to make it easy to rebuild in case of build error. Also build 
#	parameters are explicit so that it is easy to understand or override. This script
#	generates a ./build.config file to be used by ./buildRelease, ./buildPcv and ./buildDev. 
#	Run this script after ./setEnv.
#
# USAGE
#	See printUsage()
#
# NOTES
#	When bash script is run from Hudson, the output string of $(hostname), $(whoami) is return
#	with a trailing '\r'. Use tr to remove the trailing '\r' ($(hostname | tr -d -c [:print:])).


echo "NextLabs com.nextlabs.menuitem Build Configuration Script"
echo "Specify --help for more information"


#
# Process commandline parameters
#

# ------------------------------
# printUsage()

function printUsage
{
	echo "usage: configure [--type=release|pcv_smdc|pcv_cdc|dev] [--mapBuildRoot=<drive>]"
	echo "  mapBuildRoot  Use short path for NLBUILDROOT to avoid Cygwin and InstallShield"
	echo "                path length limitation. Specify a drive letter that NLBUILDROOT is"
	echo "                mapped to (e.g., --mapBuildRoot=k). IMPORTANT: Beware that if you"
	echo "                have two Hudson projects setup to use the same drive, you can"
	echo "                potentially have one project changing drive mapping of another"
	echo "                in the middle of a build and produce unpredictible result. In this"
	echo "                case, you should use a different drive mapping for a second"
	echo "                project."
	echo "  type          Build configuration type. Default is dev. Valid values are:"
	echo "                  release"
	echo "                    BUILD_NUMBER must be specified"
	echo "                    BUILDTYPE=release"
	echo "                    PREFAST=0"
	echo "                  pcv_smdc or pcv_cdc"
	echo "                    BUILD_NUMBER is generated by this script"
	echo "                    BUILDTYPE=release|debug"
	echo "                    PREFAST=1"
	echo "                  dev"
	echo "                    BUILD_NUMBER is generated by this script"
	echo "                    BUILDTYPE=release|debug"
	echo "                    PREFAST=0|1"
	echo ""
	echo "Environment variables used by this script include:"
	echo "  BUILD_NUMBER=<#>         Valid only for --type=release. Otherwise, auto-generated."
	echo "  BUILDTYPE=release|debug   Always release for --type=release"
	echo "  NLEXTERNALDIR=<path>      Must be set by you"
	echo "  NLBUILDROOT=<path>        Will always be set to current directory"
	echo "  PREFAST=0|1"
	echo ""
	echo "Environment Variables:"
	echo "  BUILD_NUMBER     = $BUILD_NUMBER"
	echo "  BUILDTYPE        = $BUILDTYPE"
	echo "  OFFICIALCERT     = $OFFICIALCERT"
	echo "  PREFAST          = $PREFAST"
	echo "  NLBUILDROOT      = $NLBUILDROOT"
	echo "  NLEXTERNALDIR    = $NLEXTERNALDIR"
}

# Help
if [ "$1" == "-h" ] || [ "$1" == "--help" ]; then
	printUsage
	exit 0
fi

# Parse arguements
CONFIG_TYPE=dev
MAP_BUILD_ROOT=

while [ $# -gt 0 ]; do
	if [ "${1%%=*}" == "--type" ]; then
		CONFIG_TYPE=${1##*=}
	elif [ "${1%%=*}" == "--mapBuildRoot" ]; then
		MAP_BUILD_ROOT=${1##*=}
	fi
	
	shift
done

# Check for errors
if [ "$CONFIG_TYPE" != "release" ] &&  [ "$CONFIG_TYPE" != "pcv_smdc" ] \
	&&  [ "$CONFIG_TYPE" != "pcv_cdc" ] &&  [ "$CONFIG_TYPE" != "dev" ]; then
	echo "### ERROR: Invalid config type $CONFIG_TYPE"
	exit 1
fi

# Print arguements
echo "INFO: Parameters:"
echo "  CONFIG_TYPE      = $CONFIG_TYPE"
echo "  MAP_BUILD_ROOT   = $MAP_BUILD_ROOT"


#
# Check for errors
#

MAP_PATH=${MAP_BUILD_ROOT}:/
NLEXTERNALDIR=$(cygpath -m "$NLEXTERNALDIR" | tr -d -c [:print:])
NLEXTERNALDIR2=$(cygpath -m "$NLEXTERNALDIR2" | tr -d -c [:print:])
BUILD_NUMBER=$(echo $BUILD_NUMBER | tr -d -c [:digit:])

if [ "$MAP_BUILD_ROOT" != "" ] && [ ! -d $MAP_PATH ]; then
	echo "### ERROR: Invalid mapped build root $MAP_PATH"
	exit 1
fi

if [ "$NLEXTERNALDIR" == "" ]; then
	echo "### ERROR: Missing variable \$NLEXTERNALDIR"
	exit 1
fi

if [ ! -d $NLEXTERNALDIR ]; then
	echo "### ERROR: Missing external directory $NLEXTERNALDIR"
	exit 1
fi

if [ "$NLEXTERNALDIR2" == "" ]; then
	echo "### ERROR: Missing variable \$NLEXTERNALDIR2"
	exit 1
fi

if [ ! -d $NLEXTERNALDIR2 ]; then
	echo "### ERROR: Missing external directory $NLEXTERNALDIR2"
	exit 1
fi

if [ "$CONFIG_TYPE" == "release" ] || [ "$CONFIG_TYPE" == "pcv_smdc" ] || [ "$CONFIG_TYPE" == "pcv_cdc" ]; then
#TBF: Should check if BUILD_NUMBER is numeric

	if [ "$BUILD_NUMBER" == "" ] || [ $BUILD_NUMBER -eq 0 ]; then
		echo "### ERROR: Missing or invalid \$BUILD_NUMBER"
		exit 1
	fi
fi


#
# Prepare variables
#

# Set project root
if [ "$MAP_BUILD_ROOT" == "" ]; then
	NLBUILDROOT=$(cygpath -m $(pwd) | tr -d -c [:print:])
else
	NLBUILDROOT=${MAP_BUILD_ROOT}:
fi

# Compiler variables
if [ "$CONFIG_TYPE" == "release" ]; then
	BUILDTYPE=release
	PREFAST=0
	OFFICIALCERT=1
	VERSION_BUILD=$BUILD_NUMBER
	VERSION_BUILD_SHORT=$BUILD_NUMBER	
elif [ "$CONFIG_TYPE" == "pcv_smdc" ] || [ "$CONFIG_TYPE" == "pcv_cdc" ]; then	
	if [ "$BUILDTYPE" == "" ] || [ "$BUILDTYPE" != "debug" ]; then
		BUILDTYPE=release
	fi
	
	if [ "$PREFAST" == "" ] || [ $PREFAST -ne 0 ]; then
		PREFAST=1
	fi

	if [ "$CONFIG_TYPE" == "pcv_smdc" ]; then
		BUILD_CODE=PS
	else
		BUILD_CODE=PC
	fi
	
	BRANCH_NAME=1.0

	if [ "$BRANCH_NAME" == "" ]; then
		BRANCH_NAME=$(basename `pwd`)

		if [ "$BRANCH_NAME" == "workspace" ]; then
			BRANCH_NAME=$(basename $(dirname `pwd`))
		fi
	fi
	
	OFFICIALCERT=0
	VERSION_BUILD_SHORT=$BUILD_NUMBER${BUILD_CODE}-$BRANCH_NAME
	VERSION_BUILD=$VERSION_BUILD_SHORT
else	
	if [ "$BUILD_NUMBER" == "" ] || [ $BUILD_NUMBER -eq 0 ]; then
		BUILD_NUMBER=10001
	fi

	if [ "$BUILDTYPE" == "" ] || [ "$BUILDTYPE" != "release" ]; then
		BUILDTYPE=debug
	fi
	
	if [ "$PREFAST" == "" ] || [ $PREFAST -ne 0 ]; then
		PREFAST=1
	fi

	OFFICIALCERT=0
	VERSION_BUILD_SHORT=${BUILD_NUMBER}DX_$(hostname | tr -d -c [:print:])
	VERSION_BUILD=$VERSION_BUILD_SHORT-$(whoami | tr -d -c [:print:])-$(date +"%Y.%m.%d-%H:%M")
fi

# Project info
PRODUCT_NAME="\"Rights Management Extension - Customized Menu Item\""
VERSION_MAJOR=${VERSION_MAJOR}
VERSION_MINOR=${VERSION_MINOR}
VERSION_MAINTENANCE=${VERSION_MAINTENANCE}
VERSION_PATCH=${VERSION_PATCH}
VERSION_STR=$VERSION_MAJOR.$VERSION_MINOR.$VERSION_MAINTENANCE.$VERSION_PATCH
BUILD_DATE=$(date +"%Y%m%d" | tr -d -c [:digit:])
BUILD_DATE_LONG=$(date +"%Y%m%d%H%M" | tr -d -c [:digit:])
PACKAGE_NAME=com.nextlabs.menuitem

# Dependencies used by to copy java sdk files
if [ "$JAVA_SDK_ARTIFACTS_BIN_ZIP_FILE" == "" ]; then
	perl $NLBUILDROOT/scripts/getNewestProductBuildArtifactFile.pl \
		--startpath=s:/releases/Platform/2021.03 \
		--outfile=build.config.javasdk --varname=JAVA_SDK_ARTIFACTS_BIN_ZIP_FILE
	source build.config.javasdk
fi

if [ "$CONFIG_TYPE" == "release" ]; then
	REPOSITORY_ROOT=s:/build/release_candidate
else
	REPOSITORY_ROOT=s:/build/pcv
fi


#
# Generate build.config
#

# Write file

(
cat <<EOT
#!/bin/bash
#
# Description
#	This script contains variable to be used by ./buildAll script. It can also be used to
#	setup the environment for manual compilation. It is especially useful for partial 
#	rebuilding after fixing compilation problem or incremental build after bug fix.
#
# WARNING
#	This file is generated by ./configure. You may edit this file for debugging because
#	changes will be overriden when ./configure is run.

export CONFIG_TYPE=$CONFIG_TYPE
export PRODUCT_NAME=$PRODUCT_NAME
export VERSION_STR=$VERSION_STR
export BUILD_NUMBER=$BUILD_NUMBER
export VERSION_BUILD=$VERSION_BUILD
export VERSION_BUILD_SHORT=$VERSION_BUILD_SHORT
export BUILDTYPE=$BUILDTYPE
export BUILD_DATE=$BUILD_DATE
export BUILD_DATE_LONG=$BUILD_DATE_LONG
export PREFAST=$PREFAST
export OFFICIALCERT=$OFFICIALCERT
export PACKAGE_NAME=$PACKAGE_NAME

export JAVA_SDK_ARTIFACTS_BIN_ZIP_FILE=$JAVA_SDK_ARTIFACTS_BIN_ZIP_FILE

export REPOSITORY_ROOT=$REPOSITORY_ROOT

export NLBUILDROOT=$NLBUILDROOT
export NLEXTERNALDIR=$NLEXTERNALDIR
export NLEXTERNALDIR2=$NLEXTERNALDIR2
export ECLIPSE_PLUGINS=$ECLIPSE_PLUGINS

EOT
) > build.config

# Print content of build.config
echo ""
echo "INFO: build.config"

cat build.config


#
# Generate scripts/build.properties
#

# Write file

rm -f scripts/build.properties
(
cat <<EOT
# ---------------------------------------------------------------------------
# Configurable build properties
#
# Description:
#	The properties in this file are configurable properties. They should be updated 
#	according to the environment and release version. The properties should are used
#	by build_xlib.xml, build_compile.xml and build_publish.xml. This property file
#	should contain all the properties to run any of these Ant scripts. If any 
#	configurable property is missing, it should be added to this script.
#
#	Note that this script should not contain any property that acts a local variable
#	to a build.xml file. Those should be specified in the build.xml file using
#	<properties> tag.
#
#	For developer:
#		The values specified in this property file need to be adjusted in order for 
#		you to compile code in you development environment using build_compile.xml. 
#		Since this property file contains all configurable properties needed to
#		build a source tree, you should be able to build after updating this file.
#		You may compile using compileIt.bat or run Ant at a command prompt.
#
#	For build machine:
#		To perform scripted build, we may generate this build.properties file
#		on-the-fly or use Ant commandline to override the properties. Ant commandline
#		can be specified through environment varibale ANT_ARGS. In either case, specify
#		-D<name>=<value> to override a property.
# ---------------------------------------------------------------------------

# Source and libraries
nlbuildroot=$NLBUILDROOT
nlexternaldir=$NLEXTERNALDIR
nlexternaldir2=$NLEXTERNALDIR2
eclipse_plugins=$ECLIPSE_PLUGINS

java_sdk_artifacts_bin_zip_file=$JAVA_SDK_ARTIFACTS_BIN_ZIP_FILE

# Build variables
product_name="Rights Management Extension - Customized Menu Item"
package_name=com.nextlabs.menuitem
version_str=$VERSION_STR
build_number=$BUILD_NUMBER
version_build_short=
build_date_long=$BUILD_DATE_LONG
repository_root=$REPOSITORY_ROOT

# Manifest for plugin
manifest-version=1.0
bundle-manifestversion=2
bundle-name=Menuitem
bundle-symbolicname=com.nextlabs.menuitem; singleton:=true
bundle-version=$VERSION_STR
bundle-activator=com.nextlabs.menuitem.Activator
bundle-vendor=NEXTLABS
require-bundle=org.eclipse.ui,org.eclipse.core.runtime,com.teamcenter.rac.aifrcp,com.teamcenter.rac.ets,com.teamcenter.rac.kernel,TcSoaCoreRac,TcSoaCommon
bundle-requiredexecutionenvironment=JavaSE-1.6
bundle-activationpolicy=lazy
export-package=com.nextlabs.menuitem,com.nextlabs.menuitem.handlers
bundle-classpath=xlib/commons-configuration-1.8.jar,xlib/commons-lang-2.6.jar,xlib/jakarta.activation.jar,xlib/jakarta.xml.bind-api.jar,xlib/activation-1.1.jar,xlib/antlr-2.7.7.jar,xlib/apache-mime4j-core-0.7.2.jar,xlib/axiom-api-1.2.21.jar,xlib/axiom-dom-1.2.21.jar,xlib/axiom-impl-1.2.21.jar,xlib/axis2-adb-1.7.9.jar,xlib/axis2-jaxws-1.7.9.jar,xlib/axis2-kernel-1.7.9.jar,xlib/axis2-transport-http-1.7.9.jar,xlib/axis2-transport-local-1.7.9.jar,xlib/castor-0.9.5.4.jar,xlib/commons-codec-1.15.jar,xlib/commons-discovery-0.5.jar,xlib/commons-fileupload-1.3.3.jar,xlib/commons-httpclient-3.1.jar,xlib/commons-io-2.1.jar,xlib/commons-lang3-3.11.jar,xlib/commons-logging-1.2.jar,xlib/disruptor-3.3.11.jar,xlib/dnsjava.jar,xlib/ehcache-2.10.6.jar,xlib/embeddedpdp.jar,xlib/geronimo-annotation_1.0_spec-1.1.jar,xlib/geronimo-jta_1.1_spec-1.1.jar,xlib/geronimo-stax-api_1.0_spec-1.0.1.jar,xlib/geronimo-ws-metadata_2.0_spec-1.1.2.jar,xlib/guava-30.1-jre.jar,xlib/httpclient-4.5.13.jar,xlib/httpcore-4.4.11.jar,xlib/jackson-annotations-2.12.2.jar,xlib/jackson-core-2.12.2.jar,xlib/jackson-databind-2.12.2.jar,xlib/java-jwt-3.8.0.jar,xlib/jaxb-api-2.2.6.jar,xlib/jaxen-1.1.6.jar,xlib/jcl-over-slf4j-1.7.28.jar,xlib/jsr311-api-1.1.1.jar,xlib/log4j-api-2.13.1.jar,xlib/log4j-core-2.13.1.jar,xlib/log4j-slf4j-impl-2.13.1.jar,xlib/mail-1.4.jar,xlib/neethi-3.0.3.jar,xlib/nextlabs-openaz-pep.jar,xlib/openaz-pep-0.0.1-SNAPSHOT.jar,xlib/openaz-xacml-0.0.1-SNAPSHOT.jar,xlib/slf4j-api-1.7.28.jar,xlib/slf4j-simple-1.7.28.jar,xlib/stax2-api-3.1.1.jar,xlib/woden-core-1.0M10.jar,xlib/woodstox-core-asl-4.2.0.jar,xlib/wsdl4j-1.6.2.jar,xlib/xercesImpl-2.12.1.jar,xlib/xml-apis.jar,xlib/xmlbeans-5.0.0.jar,xlib/xmlschema-core-2.2.1.jar,xlib/,.
EOT
) > scripts/build.properties

# Print content of scripts/build.properties
echo ""
echo "INFO: scripts/build.properties"

cat scripts/build.properties
