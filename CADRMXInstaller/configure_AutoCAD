#!/bin/bash
#
# DESCRIPTION
#	This script generates a number of bash variables used in PCV and release build.
#
#	The main objective is to make it easy to rebuild in case of build error. Also build
#	parameters are explicit so that it is easy to understand or override. This script
#	generates a ./build.config file to be used by ./buildRelease, ./buildPcv and ./buildDev.
#	Run this script after ./setEnv.
#
# USAGE
#	See printUsage()
#
# NOTES
#	When bash script is run from Hudson, the output string of $(hostname), $(whoami) is return
#	with a trailing '\r'. Use tr to remove the trailing '\r' ($(hostname | tr -d -c [:print:])).


echo "NextLabs Rights Management eXtension Build Configuration Script"
echo "Specify --help for more information"


#
# Process commandline parameters
#

# ------------------------------
# printUsage()

function printUsage
{
	echo "usage: configure [--type=release|pcv_smdc|pcv_cdc|dev] [--mapBuildRoot=<drive>]"
	echo "  mapBuildRoot  Use short path for NLBUILDROOT to avoid Cygwin and InstallShield"
	echo "                path length limitation. Specify a drive letter that NLBUILDROOT is"
	echo "                mapped to (e.g., --mapBuildRoot=k). IMPORTANT: Beware that if you"
	echo "                have two Hudson projects setup to use the same drive, you can"
	echo "                potentially have one project changing drive mapping of another"
	echo "                in the middle of a build and produce unpredictible result. In this"
	echo "                case, you should use a different drive mapping for a second"
	echo "                project."
	echo "  type          Build configuration type. Default is dev. Valid values are:"
	echo "                  release"
	echo "                    BUILD_NUMBER must be specified"
	echo "                    BUILDTYPE=release"
	echo "                    PREFAST=0"
	echo "                  pcv_smdc or pcv_cdc"
	echo "                    BUILD_NUMBER is generated by this script"
	echo "                    BUILDTYPE=release|debug"
	echo "                    PREFAST=1"
	echo "                  dev"
	echo "                    BUILD_NUMBER is generated by this script"
	echo "                    BUILDTYPE=release|debug"
	echo "                    PREFAST=0|1"
	echo ""
	echo "Environment variables used by this script include:"
	echo "  BUILD_NUMBER=<#>         Valid only for --type=release. Otherwise, auto-generated."
	echo "  BUILDTYPE=release|debug   Always release for --type=release"
	echo "  NLEXTERNALDIR=<path>      Must be set by you"
	echo "  NLEXTERNALDIR2=<path>      Must be set by you"
	echo "  NLBUILDROOT=<path>        Will always be set to current directory"
	echo "  PREFAST=0|1"
	echo ""
	echo "Environment Variables:"
	echo "  BUILD_NUMBER     = $BUILD_NUMBER"
	echo "  BUILDTYPE        = $BUILDTYPE"
	echo "  OFFICIALCERT     = $OFFICIALCERT"
	echo "  PREFAST          = $PREFAST"
	echo "  NLBUILDROOT      = $NLBUILDROOT"
	echo "  NLEXTERNALDIR    = $NLEXTERNALDIR"
	echo "  NLEXTERNALDIR2    = $NLEXTERNALDIR2"
}

# Help
if [ "$1" == "-h" ] || [ "$1" == "--help" ]; then
	printUsage
	exit 0
fi

# Parse arguements
CONFIG_TYPE=dev
MAP_BUILD_ROOT=

while [ $# -gt 0 ]; do
	if [ "${1%%=*}" == "--type" ]; then
		CONFIG_TYPE=${1##*=}
	elif [ "${1%%=*}" == "--mapBuildRoot" ]; then
		MAP_BUILD_ROOT=${1##*=}
	fi

	shift
done

# Check for errors
if [ "$CONFIG_TYPE" != "release" ] &&  [ "$CONFIG_TYPE" != "pcv_smdc" ] \
	&&  [ "$CONFIG_TYPE" != "pcv_cdc" ] &&  [ "$CONFIG_TYPE" != "dev" ]; then
	echo "### ERROR: Invalid config type $CONFIG_TYPE"
	exit 1
fi

# Print arguements
echo "INFO: Parameters:"
echo "  CONFIG_TYPE      = $CONFIG_TYPE"
echo "  MAP_BUILD_ROOT   = $MAP_BUILD_ROOT"


#
# Check for errors
#

MAP_PATH=${MAP_BUILD_ROOT}:/
NLPROJECTROOT=$(cygpath -m "$NLPROJECTROOT" | tr -d -c [:print:])
NLEXTERNALDIR=$(cygpath -m "$NLEXTERNALDIR" | tr -d -c [:print:])
NLEXTERNALDIR2=$(cygpath -m "$NLEXTERNALDIR2" | tr -d -c [:print:])
BUILD_NUMBER=$(echo $BUILD_NUMBER | tr -d -c [:digit:])

if [ "$MAP_BUILD_ROOT" != "" ] && [ ! -d $MAP_PATH ]; then
	echo "### ERROR: Invalid mapped build root $MAP_PATH"
	exit 1
fi

if [ "$NLEXTERNALDIR" == "" ]; then
	echo "### ERROR: Missing variable \$NLEXTERNALDIR"
	exit 1
fi

if [ ! -d $NLEXTERNALDIR ]; then
	echo "### ERROR: Missing external directory $NLEXTERNALDIR"
	exit 1
fi

if [ "$NLEXTERNALDIR2" == "" ]; then
	echo "### ERROR: Missing variable \$NLEXTERNALDIR2"
	exit 1
fi

if [ ! -d $NLEXTERNALDIR2 ]; then
	echo "### ERROR: Missing external directory $NLEXTERNALDIR2"
	exit 1
fi

if [ "$CONFIG_TYPE" == "release" ] || [ "$CONFIG_TYPE" == "pcv_smdc" ] || [ "$CONFIG_TYPE" == "pcv_cdc" ]; then
#TBF: Should check if BUILD_NUMBER is numeric

	if [ "$BUILD_NUMBER" == "" ] || [ $BUILD_NUMBER -eq 0 ]; then
		echo "### ERROR: Missing or invalid \$BUILD_NUMBER"
		exit 1
	fi
fi


#
# Prepare variables
#

# Set project root
if [ "$MAP_BUILD_ROOT" == "" ]; then
	NLBUILDROOT=$(cygpath -m $(pwd) | tr -d -c [:print:])
else
	NLBUILDROOT=${MAP_BUILD_ROOT}:
fi

# Compiler variables
if [ "$CONFIG_TYPE" == "release" ]; then
	BUILDTYPE=release
	PREFAST=0
	OFFICIALCERT=1
	VERSION_BUILD=$BUILD_NUMBER
	VERSION_BUILD_SHORT=$BUILD_NUMBER
elif [ "$CONFIG_TYPE" == "pcv_smdc" ] || [ "$CONFIG_TYPE" == "pcv_cdc" ]; then
	if [ "$BUILDTYPE" == "" ] || [ "$BUILDTYPE" != "debug" ]; then
		BUILDTYPE=release
	fi

	if [ "$PREFAST" == "" ] || [ $PREFAST -ne 0 ]; then
		PREFAST=1
	fi

	if [ "$CONFIG_TYPE" == "pcv_smdc" ]; then
		BUILD_CODE=PS
	else
		BUILD_CODE=PC
	fi

	BRANCH_NAME=1.0

	if [ "$BRANCH_NAME" == "" ]; then
		BRANCH_NAME=$(basename `pwd`)

		if [ "$BRANCH_NAME" == "workspace" ]; then
			BRANCH_NAME=$(basename $(dirname `pwd`))
		fi
	fi

	OFFICIALCERT=0
	VERSION_BUILD_SHORT=$BUILD_NUMBER${BUILD_CODE}-$BRANCH_NAME
	VERSION_BUILD=$VERSION_BUILD_SHORT
else
	if [ "$BUILD_NUMBER" == "" ] || [ $BUILD_NUMBER -eq 0 ]; then
		BUILD_NUMBER=10001
	fi

	if [ "$BUILDTYPE" == "" ] || [ "$BUILDTYPE" != "release" ]; then
		BUILDTYPE=debug
	fi

	if [ "$PREFAST" == "" ] || [ $PREFAST -ne 0 ]; then
		PREFAST=1
	fi

	OFFICIALCERT=0
	VERSION_BUILD_SHORT=${BUILD_NUMBER}DX_$(hostname | tr -d -c [:print:])
	VERSION_BUILD=$VERSION_BUILD_SHORT-$(whoami | tr -d -c [:print:])-$(date +"%Y.%m.%d-%H:%M")
fi

# Project info
PROJECT_NAME=CADRMXInstaller
PRODUCT_NAME="Rights Management eXtension - CAD RMX Installer"
VERSION_MAJOR=${VERSION_MAJOR}
VERSION_MINOR=${VERSION_MINOR}
VERSION_MAINTENANCE=${VERSION_MAINTENANCE}
VERSION_PATCH=${VERSION_PATCH}
VERSION_STR=$VERSION_MAJOR.$VERSION_MINOR.$VERSION_MAINTENANCE.$VERSION_PATCH
BUILD_DATE=$(date +"%Y%m%d" | tr -d -c [:digit:])
BUILD_DATE_LONG=$(date +"%Y%m%d%H%M" | tr -d -c [:digit:])
PACKAGE_NAME=CADRMXInstaller
ANT_HOME=$NLEXTERNALDIR/apache-ant/apache-ant-1.9.4
ANT=$ANT_HOME/bin/ant

if [ "$CONFIG_TYPE" == "release" ]; then
	REPOSITORY_ROOT=s:/build/release_candidate
	RELEASE_ARTIFACTS_ROOT=s:/build/release_artifacts
else
	REPOSITORY_ROOT=s:/build/pcv
	RELEASE_ARTIFACTS_ROOT=${REPOSITORY_ROOT}
fi

if [ "$XLIB_NXLAUTOPROTECT_ZIP_FILE" == "" ]; then
	rm -f ${NLBUILDROOT}/build.config.nxlautoprotect
	perl $NLBUILDROOT/build/getNewestProductBuildArtifactFile.pl \
		--startpath=${REPOSITORY_ROOT}/Teamcenter/RightsManagementExtension/NxlAutoProtect/${VERSION_STR} \
		--outfile=${NLBUILDROOT}/build.config.nxlautoprotect --varname=XLIB_NXLAUTOPROTECT_ZIP_FILE
	source ${NLBUILDROOT}/build.config.nxlautoprotect
fi

# This is .msi installer, will not care about Linux build
# if [ "$XLIB_NXLAUTOPROTECT_LINUX_ZIP_FILE" == "" ]; then
# 	rm -f ${NLBUILDROOT}/build.config.nxlautoprotect.linux
# 	perl $NLBUILDROOT/build/getNewestProductBuildArtifactFile.pl \
# 		--startpath=${REPOSITORY_ROOT}/Teamcenter/RightsManagementExtension/NxlAutoProtect/5.1.0.0_linux \
# 		--outfile=${NLBUILDROOT}/build.config.nxlautoprotect.linux --varname=XLIB_NXLAUTOPROTECT_LINUX_ZIP_FILE
# 	source ${NLBUILDROOT}/build.config.nxlautoprotect.linux
# fi

if [ "$XLIB_CREOINTEGRATION_ZIP_FILE" == "" ]; then
	rm -f ${NLBUILDROOT}/build.config.creointegration
	perl $NLBUILDROOT/build/getNewestProductBuildArtifactFile.pl \
		--startpath=${REPOSITORY_ROOT}/Teamcenter/RightsManagementExtension/CreoIntegration/${VERSION_STR} \
		--outfile=${NLBUILDROOT}/build.config.creointegration --varname=XLIB_CREOINTEGRATION_ZIP_FILE
	source ${NLBUILDROOT}/build.config.creointegration
fi

if [ "$XLIB_SLDWORKSINTEGRATION_ZIP_FILE" == "" ]; then
	rm -f ${NLBUILDROOT}/build.config.sldworksintegration
	perl $NLBUILDROOT/build/getNewestProductBuildArtifactFile.pl \
		--startpath=${REPOSITORY_ROOT}/Teamcenter/RightsManagementExtension/SldWorksIntegration/${VERSION_STR} \
		--outfile=${NLBUILDROOT}/build.config.sldworksintegration --varname=XLIB_SLDWORKSINTEGRATION_ZIP_FILE
	source ${NLBUILDROOT}/build.config.sldworksintegration
fi

if [ "$XLIB_AUTOCADINTEGRATION_ZIP_FILE" == "" ]; then
	rm -f ${NLBUILDROOT}/build.config.autocadintegration
	perl $NLBUILDROOT/build/getNewestProductBuildArtifactFile.pl \
		--startpath=${REPOSITORY_ROOT}/Teamcenter/RightsManagementExtension/AutoCADIntegration/${VERSION_STR} \
		--outfile=${NLBUILDROOT}/build.config.autocadintegration --varname=XLIB_AUTOCADINTEGRATION_ZIP_FILE
	source ${NLBUILDROOT}/build.config.autocadintegration
fi

#
# Generate build.config
#

# Write file

(
cat <<EOT
#!/bin/bash
#
# Description
#	This script contains variable to be used by ./buildAll script. It can also be used to
#	setup the environment for manual compilation. It is especially useful for partial
#	rebuilding after fixing compilation problem or incremental build after bug fix.
#
# WARNING
#	This file is generated by ./configure. You may edit this file for debugging because
#	changes will be overriden when ./configure is run.

export CONFIG_TYPE=$CONFIG_TYPE
export PRODUCT_NAME=$PRODUCT_NAME
export VERSION_STR=$VERSION_STR
export BUILD_NUMBER=$BUILD_NUMBER
export VERSION_BUILD=$VERSION_BUILD
export VERSION_BUILD_SHORT=$VERSION_BUILD_SHORT
export BUILDTYPE=$BUILDTYPE
export BUILD_DATE=$BUILD_DATE
export BUILD_DATE_LONG=$BUILD_DATE_LONG
export PREFAST=$PREFAST
export OFFICIALCERT=$OFFICIALCERT
export PACKAGE_NAME=$PACKAGE_NAME

export REPOSITORY_ROOT=$REPOSITORY_ROOT

export XLIB_NXLAUTOPROTECT_ZIP_FILE=$XLIB_NXLAUTOPROTECT_ZIP_FILE
export XLIB_CREOINTEGRATION_ZIP_FILE=$XLIB_CREOINTEGRATION_ZIP_FILE
export XLIB_SLDWORKSINTEGRATION_ZIP_FILE=$XLIB_SLDWORKSINTEGRATION_ZIP_FILE
export XLIB_AUTOCADINTEGRATION_ZIP_FILE=$XLIB_AUTOCADINTEGRATION_ZIP_FILE

export NLBUILDROOT=$NLBUILDROOT
export NLEXTERNALDIR=$NLEXTERNALDIR
export NLEXTERNALDIR2=$NLEXTERNALDIR2
export TC_REPOSITORY_ROOT=$TC_REPOSITORY_ROOT
export ANT_HOME="$ANT_HOME"
export ANT="$ANT"

EOT
) > build.config

# Print content of build.config
echo ""
echo "INFO: build.config"

cat build.config


#
# Generate build/build.properties
#

# Write file

rm -f build/build.properties
(
cat <<EOT
# ---------------------------------------------------------------------------
# Configurable build properties
#
# Description:
#	The properties in this file are configurable properties. They should be updated
#	according to the environment and release version. The properties should are used
#	by build_xlib.xml, build_compile.xml and build_publish.xml. This property file
#	should contain all the properties to run any of these Ant scripts. If any
#	configurable property is missing, it should be added to this script.
#
#	Note that this script should not contain any property that acts a local variable
#	to a build.xml file. Those should be specified in the build.xml file using
#	<properties> tag.
#
#	For developer:
#       rm -f build a source ${NLBUILDROOT}/ee, you should be able to build after updating this file.
#		The values specified in this property file need to be adjusted in order for
#		you to compile code in you development environment using build_compile.xml.
#		Since this property file contains all configurable properties needed to
#		build a source ${NLBUILDROOT}/ee, you should be able to build after updating this file.
#		You may compile using compileIt.bat or run Ant at a command prompt.
#
#	For build machine:
#		To perform scripted build, we may generate this build.properties file
#		on-the-fly or use Ant commandline to override the properties. Ant commandline
#		can be specified through environment varibale ANT_ARGS. In either case, specify
#       rm -f Source ${NLBUILDROOT}/d libraries
#		-D<name>=<value> to override a property.
# ---------------------------------------------------------------------------

# Source ${NLBUILDROOT}/d libraries
nlbuildroot=$NLBUILDROOT
nlexternaldir=$NLEXTERNALDIR
nlexternaldir2=$NLEXTERNALDIR2
tc_repository_root=$TC_REPOSITORY_ROOT

# Xlib (Dependencies from NXRMX, CreoRMX, SldWorksRMX)
xlib_NxlAutoProtect_build_artifacts_zip_file=$XLIB_NXLAUTOPROTECT_ZIP_FILE
xlib_CreoIntegration_build_artifacts_zip_file=$XLIB_CREOINTEGRATION_ZIP_FILE
xlib_SldWorksIntegration_build_artifacts_zip_file=$XLIB_SLDWORKSINTEGRATION_ZIP_FILE
xlib_AutoCADIntegration_build_artifacts_zip_file=$XLIB_AUTOCADINTEGRATION_ZIP_FILE

# Build variables
product_name=$PRODUCT_NAME
package_name=$PACKAGE_NAME
version_str=$VERSION_STR
build_number=$BUILD_NUMBER
version_build_short=
build_date_long=$BUILD_DATE_LONG
repository_root=$REPOSITORY_ROOT
EOT
) > BuildAutoCAD/build.properties

# Print content of BuildAutoCAD/build.properties
echo ""
echo "INFO: BuildAutoCAD/build.properties"

cat BuildAutoCAD/build.properties
