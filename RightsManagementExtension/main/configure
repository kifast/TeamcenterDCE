#!/bin/bash
#
# DESCRIPTION
#	This script generates a number of bash variables used in PCV and release build.
#
#	The main objective is to make it easy to rebuild in case of build error. Also build
#	parameters are explicit so that it is easy to understand or override. This script
#	generates a ./build.config file to be used by ./buildRelease, ./buildPcv and ./buildDev.
#	Run this script after ./setEnv.
#
# USAGE
#	See printUsage()
#
# NOTES
#	When bash script is run from Hudson, the output string of $(hostname), $(whoami) is return
#	with a trailing '\r'. Use tr to remove the trailing '\r' ($(hostname | tr -d -c [:print:])).


echo "NextLabs Rights Management eXtension Build Configuration Script"
echo "Specify --help for more information"


#
# Process commandline parameters
#

# ------------------------------
# printUsage()

function printUsage
{
	echo "usage: configure [--type=release|pcv_smdc|pcv_cdc|dev] [--mapBuildRoot=<drive>]"
	echo "  mapBuildRoot  Use short path for NLBUILDROOT to avoid Cygwin and InstallShield"
	echo "                path length limitation. Specify a drive letter that NLBUILDROOT is"
	echo "                mapped to (e.g., --mapBuildRoot=k). IMPORTANT: Beware that if you"
	echo "                have two Hudson projects setup to use the same drive, you can"
	echo "                potentially have one project changing drive mapping of another"
	echo "                in the middle of a build and produce unpredictible result. In this"
	echo "                case, you should use a different drive mapping for a second"
	echo "                project."
	echo "  type          Build configuration type. Default is dev. Valid values are:"
	echo "                  release"
	echo "                    BUILD_NUMBER must be specified"
	echo "                    BUILDTYPE=release"
	echo "                    PREFAST=0"
	echo "                  pcv_smdc or pcv_cdc"
	echo "                    BUILD_NUMBER is generated by this script"
	echo "                    BUILDTYPE=release|debug"
	echo "                    PREFAST=1"
	echo "                  dev"
	echo "                    BUILD_NUMBER is generated by this script"
	echo "                    BUILDTYPE=release|debug"
	echo "                    PREFAST=0|1"
	echo ""
	echo "Environment variables used by this script include:"
	echo "  BUILD_NUMBER=<#>         Valid only for --type=release. Otherwise, auto-generated."
	echo "  BUILDTYPE=release|debug   Always release for --type=release"
	echo "  NLEXTERNALDIR=<path>      Must be set by you"
	echo "  NLEXTERNALDIR2=<path>      Must be set by you"
	echo "  NLBUILDROOT=<path>        Will always be set to current directory"
	echo "  PREFAST=0|1"
	echo ""
	echo "Environment Variables:"
	echo "  BUILD_NUMBER     = $BUILD_NUMBER"
	echo "  BUILDTYPE        = $BUILDTYPE"
	echo "  OFFICIALCERT     = $OFFICIALCERT"
	echo "  PREFAST          = $PREFAST"
	echo "  NLBUILDROOT      = $NLBUILDROOT"
	echo "  NLEXTERNALDIR    = $NLEXTERNALDIR"
	echo "  NLEXTERNALDIR2    = $NLEXTERNALDIR2"
}

# Help
if [ "$1" == "-h" ] || [ "$1" == "--help" ]; then
	printUsage
	exit 0
fi

# Parse arguements
CONFIG_TYPE=dev
MAP_BUILD_ROOT=

while [ $# -gt 0 ]; do
	if [ "${1%%=*}" == "--type" ]; then
		CONFIG_TYPE=${1##*=}
	elif [ "${1%%=*}" == "--mapBuildRoot" ]; then
		MAP_BUILD_ROOT=${1##*=}
	fi

	shift
done

# Check for errors
if [ "$CONFIG_TYPE" != "release" ] &&  [ "$CONFIG_TYPE" != "pcv_smdc" ] \
	&&  [ "$CONFIG_TYPE" != "pcv_cdc" ] &&  [ "$CONFIG_TYPE" != "dev" ]; then
	echo "### ERROR: Invalid config type $CONFIG_TYPE"
	exit 1
fi

# Print arguements
echo "INFO: Parameters:"
echo "  CONFIG_TYPE      = $CONFIG_TYPE"
echo "  MAP_BUILD_ROOT   = $MAP_BUILD_ROOT"


#
# Check for errors
#

MAP_PATH=${MAP_BUILD_ROOT}:/
NLEXTERNALDIR=$(cygpath -m "$NLEXTERNALDIR" | tr -d -c [:print:])
NLEXTERNALDIR2=$(cygpath -m "$NLEXTERNALDIR2" | tr -d -c [:print:])
BUILD_NUMBER=$(echo $BUILD_NUMBER | tr -d -c [:digit:])

if [ "$MAP_BUILD_ROOT" != "" ] && [ ! -d $MAP_PATH ]; then
	echo "### ERROR: Invalid mapped build root $MAP_PATH"
	exit 1
fi

if [ "$NLEXTERNALDIR" == "" ]; then
	echo "### ERROR: Missing variable \$NLEXTERNALDIR"
	exit 1
fi

if [ ! -d $NLEXTERNALDIR ]; then
	echo "### ERROR: Missing external directory $NLEXTERNALDIR"
	exit 1
fi

if [ "$NLEXTERNALDIR2" == "" ]; then
	echo "### ERROR: Missing variable \$NLEXTERNALDIR2"
	exit 1
fi

if [ ! -d $NLEXTERNALDIR2 ]; then
	echo "### ERROR: Missing external directory $NLEXTERNALDIR2"
	exit 1
fi

if [ "$CONFIG_TYPE" == "release" ] || [ "$CONFIG_TYPE" == "pcv_smdc" ] || [ "$CONFIG_TYPE" == "pcv_cdc" ]; then
#TBF: Should check if BUILD_NUMBER is numeric

	if [ "$BUILD_NUMBER" == "" ] || [ $BUILD_NUMBER -eq 0 ]; then
		echo "### ERROR: Missing or invalid \$BUILD_NUMBER"
		exit 1
	fi
fi


#
# Prepare variables
#

# Set project root
if [ "$MAP_BUILD_ROOT" == "" ]; then
	NLBUILDROOT=$(cygpath -m $(pwd) | tr -d -c [:print:])
else
	NLBUILDROOT=${MAP_BUILD_ROOT}:
fi

# Compiler variables
if [ "$CONFIG_TYPE" == "release" ]; then
	BUILDTYPE=release
	PREFAST=0
	OFFICIALCERT=1
	VERSION_BUILD=$BUILD_NUMBER
	VERSION_BUILD_SHORT=$BUILD_NUMBER
elif [ "$CONFIG_TYPE" == "pcv_smdc" ] || [ "$CONFIG_TYPE" == "pcv_cdc" ]; then
	if [ "$BUILDTYPE" == "" ] || [ "$BUILDTYPE" != "debug" ]; then
		BUILDTYPE=release
	fi

	if [ "$PREFAST" == "" ] || [ $PREFAST -ne 0 ]; then
		PREFAST=1
	fi

	if [ "$CONFIG_TYPE" == "pcv_smdc" ]; then
		BUILD_CODE=PS
	else
		BUILD_CODE=PC
	fi

	BRANCH_NAME=1.0

	if [ "$BRANCH_NAME" == "" ]; then
		BRANCH_NAME=$(basename `pwd`)

		if [ "$BRANCH_NAME" == "workspace" ]; then
			BRANCH_NAME=$(basename $(dirname `pwd`))
		fi
	fi

	OFFICIALCERT=0
	VERSION_BUILD_SHORT=$BUILD_NUMBER${BUILD_CODE}-$BRANCH_NAME
	VERSION_BUILD=$VERSION_BUILD_SHORT
else
	if [ "$BUILD_NUMBER" == "" ] || [ $BUILD_NUMBER -eq 0 ]; then
		BUILD_NUMBER=10001
	fi

	if [ "$BUILDTYPE" == "" ] || [ "$BUILDTYPE" != "release" ]; then
		BUILDTYPE=debug
	fi

	if [ "$PREFAST" == "" ] || [ $PREFAST -ne 0 ]; then
		PREFAST=1
	fi

	OFFICIALCERT=0
	VERSION_BUILD_SHORT=${BUILD_NUMBER}DX_$(hostname | tr -d -c [:print:])
	VERSION_BUILD=$VERSION_BUILD_SHORT-$(whoami | tr -d -c [:print:])-$(date +"%Y.%m.%d-%H:%M")
fi

# Project info
PRODUCT_NAME="\"Rights Management eXtension\""
VERSION_MAJOR=${VERSION_MAJOR}
VERSION_MINOR=${VERSION_MINOR}
VERSION_MAINTENANCE=${VERSION_MAINTENANCE}
VERSION_PATCH=${VERSION_PATCH}
VERSION_STR=$VERSION_MAJOR.$VERSION_MINOR.$VERSION_MAINTENANCE.$VERSION_PATCH
BUILD_DATE=$(date +"%Y%m%d" | tr -d -c [:digit:])
BUILD_DATE_LONG=$(date +"%Y%m%d%H%M" | tr -d -c [:digit:])
PACKAGE_NAME=RightsManagementExtension

SKYDRM_DESKTOP_MAJOR_VER=2022
SKYDRM_DESKTOP_MINOR_VER=01
SKYDRM_DESKTOP_BUILD_NUMBER=1241

if [ "$CONFIG_TYPE" == "release" ]; then
	REPOSITORY_ROOT=s:/build/release_candidate
else
	REPOSITORY_ROOT=s:/build/pcv
fi

# Dependencies used by build_compile.xml file
if [ "$XLIB_CUSTOMIZED_MENU_ITEM_ZIP_FILE" == "" ]; then
	rm -f ${NLBUILDROOT}/build.config.customizedMenuItem
	perl $NLBUILDROOT/build/getNewestProductBuildArtifactFile.pl \
		--startpath=${REPOSITORY_ROOT}/Teamcenter/RightsManagementExtension/CustomizedMenuItem/${VERSION_STR} \
		--outfile=${NLBUILDROOT}/build.config.customizedMenuItem --varname=XLIB_CUSTOMIZED_MENU_ITEM_ZIP_FILE \
		--buildNumber=${BUILD_NUMBER}
	source ${NLBUILDROOT}/build.config.customizedMenuItem
fi

if [ "$XLIB_AWCONESTEPCOMMANDS_ZIP_FILE" == "" ]; then
	rm -f ${NLBUILDROOT}/build.config.awc_onestepcommands
	perl $NLBUILDROOT/build/getNewestProductBuildArtifactFile.pl \
		--startpath=${REPOSITORY_ROOT}/Teamcenter/RightsManagementExtension/AWC_OneStepCommands/${VERSION_STR} \
		--outfile=${NLBUILDROOT}/build.config.awc_onestepcommands --varname=XLIB_AWCONESTEPCOMMANDS_ZIP_FILE \
		--buildNumber=${BUILD_NUMBER}
	source ${NLBUILDROOT}/build.config.awc_onestepcommands
fi

if [ "$XLIB_TRANSLATOR_ZIP_FILE" == "" ]; then
	rm -f ${NLBUILDROOT}/build.config.translator
	perl $NLBUILDROOT/build/getNewestProductBuildArtifactFile.pl \
		--startpath=${REPOSITORY_ROOT}/Teamcenter/RightsManagementExtension/Translator/${VERSION_STR} \
		--outfile=${NLBUILDROOT}/build.config.translator --varname=XLIB_TRANSLATOR_ZIP_FILE \
		--buildNumber=${BUILD_NUMBER}
	source ${NLBUILDROOT}/build.config.translator
fi


if [ "$XLIB_BATCHPROTECT_ZIP_FILE" == "" ]; then
	rm -f ${NLBUILDROOT}/build.config.batchprotect
	perl $NLBUILDROOT/build/getNewestProductBuildArtifactFile.pl \
		--startpath=${REPOSITORY_ROOT}/Teamcenter/RightsManagementExtension/BatchProtect/${VERSION_STR} \
		--outfile=${NLBUILDROOT}/build.config.batchprotect --varname=XLIB_BATCHPROTECT_ZIP_FILE \
		--buildNumber=${BUILD_NUMBER}
	source ${NLBUILDROOT}/build.config.batchprotect
fi


if [ "$XLIB_NXLAUTOPROTECT_ZIP_FILE" == "" ]; then
	rm -f ${NLBUILDROOT}/build.config.nxlautoprotect
	perl $NLBUILDROOT/build/getNewestProductBuildArtifactFile.pl \
		--startpath=${REPOSITORY_ROOT}/Teamcenter/RightsManagementExtension/NxlAutoProtect/${VERSION_STR} \
		--outfile=${NLBUILDROOT}/build.config.nxlautoprotect --varname=XLIB_NXLAUTOPROTECT_ZIP_FILE \
		--buildNumber=${BUILD_NUMBER}
	source ${NLBUILDROOT}/build.config.nxlautoprotect
fi

if [ "$XLIB_NXLAUTOPROTECT_LINUX_ZIP_FILE" == "" ]; then
	rm -f ${NLBUILDROOT}/build.config.nxlautoprotect.linux
	perl $NLBUILDROOT/build/getNewestProductBuildArtifactFile.pl \
		--startpath=s:/build/release_candidate/Teamcenter/RightsManagementExtension/NxlAutoProtect/${VERSION_STR}_linux \
		--outfile=${NLBUILDROOT}/build.config.nxlautoprotect.linux --varname=XLIB_NXLAUTOPROTECT_LINUX_ZIP_FILE
	source ${NLBUILDROOT}/build.config.nxlautoprotect.linux
fi

if [ "$XLIB_SCFINTEGRATION_ZIP_FILE" == "" ]; then
	rm -f ${NLBUILDROOT}/build.config.scfintegration
	perl $NLBUILDROOT/build/getNewestProductBuildArtifactFile.pl \
		--startpath=${REPOSITORY_ROOT}/Teamcenter/RightsManagementExtension/SCFIntegration/${VERSION_STR} \
		--outfile=${NLBUILDROOT}/build.config.scfintegration --varname=XLIB_SCFINTEGRATION_ZIP_FILE
	source ${NLBUILDROOT}/build.config.scfintegration
fi

if [ "$XLIB_BBINTEGRATION_ZIP_FILE" == "" ]; then
	rm -f ${NLBUILDROOT}/build.config.bbintegration
	perl $NLBUILDROOT/build/getNewestProductBuildArtifactFile.pl \
		--startpath=${REPOSITORY_ROOT}/Teamcenter/RightsManagementExtension/BBIntegration/${VERSION_STR} \
		--outfile=${NLBUILDROOT}/build.config.BBintegration --varname=XLIB_BBINTEGRATION_ZIP_FILE
	source ${NLBUILDROOT}/build.config.bbintegration
fi

if [ "$XLIB_BBPLUGIN_ZIP_FILE" == "" ]; then
	rm -f ${NLBUILDROOT}/build.config.bbplugin
	perl $NLBUILDROOT/build/getNewestProductBuildArtifactFile.pl \
		--startpath=${REPOSITORY_ROOT}/Teamcenter/RightsManagementExtension/BBPlugin/${VERSION_STR} \
		--outfile=${NLBUILDROOT}/build.config.bbplugin --varname=XLIB_BBPLUGIN_ZIP_FILE
	source ${NLBUILDROOT}/build.config.bbplugin
fi

if [ "$XLIB_NXLOVERLAY_ZIP_FILE" == "" ]; then
	rm -f ${NLBUILDROOT}/build.config.nxloverlay
	perl $NLBUILDROOT/build/getNewestProductBuildArtifactFile.pl \
		--startpath=${REPOSITORY_ROOT}/Teamcenter/RightsManagementExtension/AWC_NXLOverLay/${VERSION_STR} \
		--outfile=${NLBUILDROOT}/build.config.nxloverlay --varname=XLIB_NXLOVERLAY_ZIP_FILE \
		--buildNumber=${BUILD_NUMBER}
	source ${NLBUILDROOT}/build.config.nxloverlay
fi

if [ "$XLIB_DISPATCHER_ZIP_FILE" == "" ]; then
	rm -f ${NLBUILDROOT}/build.config.dispatcher
	perl $NLBUILDROOT/build/getNewestProductBuildArtifactFile.pl \
		--startpath=${REPOSITORY_ROOT}/Teamcenter/RightsManagementExtension/Dispatcher/${VERSION_STR} \
		--outfile=${NLBUILDROOT}/build.config.dispatcher --varname=XLIB_DISPATCHER_ZIP_FILE \
		--buildNumber=${BUILD_NUMBER}
	source ${NLBUILDROOT}/build.config.dispatcher
fi

if [ "$XLIB_TEMPLATEMODIFIER_ZIP_FILE" == "" ]; then
	rm -f ${NLBUILDROOT}/build.config.templatemodifier
	perl $NLBUILDROOT/build/getNewestProductBuildArtifactFile.pl \
		--startpath=${REPOSITORY_ROOT}/Teamcenter/RightsManagementExtension/TemplateModifier/${VERSION_STR} \
		--outfile=${NLBUILDROOT}/build.config.templatemodifier --varname=XLIB_TEMPLATEMODIFIER_ZIP_FILE \
		--buildNumber=${BUILD_NUMBER}
	source ${NLBUILDROOT}/build.config.templatemodifier
fi

if [ "$XLIB_LDIFGENERATOR_ZIP_FILE" == "" ]; then
	rm -f ${NLBUILDROOT}/build.config.ldifgenerator
	perl $NLBUILDROOT/build/getNewestProductBuildArtifactFile.pl \
		--startpath=${REPOSITORY_ROOT}/Teamcenter/RightsManagementExtension/TCLdifGenerator/${VERSION_STR} \
		--outfile=${NLBUILDROOT}/build.config.ldifgenerator --varname=XLIB_LDIFGENERATOR_ZIP_FILE \
		--buildNumber=${BUILD_NUMBER}
	source ${NLBUILDROOT}/build.config.ldifgenerator
fi

if [ "$XLIB_FMS_RMX_ZIP_FILE" == "" ]; then
	rm -f ${NLBUILDROOT}/build.config.fmsrmx
	perl $NLBUILDROOT/build/getNewestProductBuildArtifactFile.pl \
		--startpath=${REPOSITORY_ROOT}/Teamcenter/RightsManagementExtension/FMSRMX/${VERSION_STR} \
		--outfile=${NLBUILDROOT}/build.config.fmsrmx --varname=XLIB_FMS_RMX_ZIP_FILE \
		--buildNumber=${BUILD_NUMBER}
	source ${NLBUILDROOT}/build.config.fmsrmx
fi

if [ "$XLIB_RACRMX_ZIP_FILE" == "" ]; then
	rm -f ${NLBUILDROOT}/build.config.racrmx
	perl $NLBUILDROOT/build/getNewestProductBuildArtifactFile.pl \
		--startpath=${REPOSITORY_ROOT}/Teamcenter/RightsManagementExtension/racrmx/${VERSION_STR} \
		--outfile=${NLBUILDROOT}/build.config.racrmx --varname=XLIB_RACRMX_ZIP_FILE \
		#--buildNumber=${BUILD_NUMBER} # pick the latest for the time being, correct in ver after 5.4
	source ${NLBUILDROOT}/build.config.racrmx
fi

if [ "$XLIB_PARTIALDOWNLOAD_CLIENT_ZIP_FILE" == "" ]; then
	rm -f ${NLBUILDROOT}/build.config.partialdownloadclient
	perl $NLBUILDROOT/build/getNewestProductBuildArtifactFile.pl \
		--startpath=${REPOSITORY_ROOT}/Teamcenter/RightsManagementExtension/FMS_PartialDownload/${VERSION_STR} \
		--outfile=${NLBUILDROOT}/build.config.partialdownloadclient --varname=XLIB_PARTIALDOWNLOAD_CLIENT_ZIP_FILE \
		--namesubstring='client' --buildNumber=${BUILD_NUMBER}
	source ${NLBUILDROOT}/build.config.partialdownloadclient
fi

if [ "$XLIB_PARTIALDOWNLOAD_SERVER_ZIP_FILE" == "" ]; then
	rm -f ${NLBUILDROOT}/build.config.partialdownloadserver
	perl $NLBUILDROOT/build/getNewestProductBuildArtifactFile.pl \
		--startpath=${REPOSITORY_ROOT}/Teamcenter/RightsManagementExtension/FMS_PartialDownload/${VERSION_STR} \
		--outfile=${NLBUILDROOT}/build.config.partialdownloadserver --varname=XLIB_PARTIALDOWNLOAD_SERVER_ZIP_FILE \
		--namesubstring='server' --buildNumber=${BUILD_NUMBER}
	source ${NLBUILDROOT}/build.config.partialdownloadserver
fi

if [ "$XLIB_TRANSRIGHTSCHECKER_ZIP_FILE" == "" ]; then
	rm -f ${NLBUILDROOT}/build.config.translatorrightschecker
	perl $NLBUILDROOT/build/getNewestProductBuildArtifactFile.pl \
		--startpath=${REPOSITORY_ROOT}/Teamcenter/RightsManagementExtension/TranslatorRightsChecker/${VERSION_STR} \
		--outfile=${NLBUILDROOT}/build.config.translatorrightschecker --varname=XLIB_TRANSRIGHTSCHECKER_ZIP_FILE \
		--buildNumber=${BUILD_NUMBER}
	source ${NLBUILDROOT}/build.config.translatorrightschecker
fi

# if [ "$XLIB_CREORMXINSTALLER_ZIP_FILE" == "" ]; then
# 	rm -f ${NLBUILDROOT}/build.config.creormxinstaller
# 	perl $NLBUILDROOT/build/getNewestProductBuildArtifactFile.pl \
# 		--startpath=${REPOSITORY_ROOT}/Teamcenter/RightsManagementExtension/CADRMXInstaller/${VERSION_STR} \
# 		--outfile=${NLBUILDROOT}/build.config.creormxinstaller --varname=XLIB_CREORMXINSTALLER_ZIP_FILE \
# 		--namesubstring='CreoRMX' --buildNumber=${BUILD_NUMBER}
# 	source ${NLBUILDROOT}/build.config.creormxinstaller
# fi

# if [ "$XLIB_NXRMXINSTALLER_ZIP_FILE" == "" ]; then
# 	rm -f ${NLBUILDROOT}/build.config.nxrmxinstaller
# 	perl $NLBUILDROOT/build/getNewestProductBuildArtifactFile.pl \
# 		--startpath=${REPOSITORY_ROOT}/Teamcenter/RightsManagementExtension/CADRMXInstaller/${VERSION_STR} \
# 		--outfile=${NLBUILDROOT}/build.config.nxrmxinstaller --varname=XLIB_NXRMXINSTALLER_ZIP_FILE \
# 		--namesubstring='NXRMX' --buildNumber=${BUILD_NUMBER}
# 	source ${NLBUILDROOT}/build.config.nxrmxinstaller
# fi

# if [ "$XLIB_SLDWORKSRMXINSTALLER_ZIP_FILE" == "" ]; then
# 	rm -f ${NLBUILDROOT}/build.config.sldworksrmxinstaller
# 	perl $NLBUILDROOT/build/getNewestProductBuildArtifactFile.pl \
# 		--startpath=${REPOSITORY_ROOT}/Teamcenter/RightsManagementExtension/CADRMXInstaller/${VERSION_STR} \
# 		--outfile=${NLBUILDROOT}/build.config.sldworksrmxinstaller --varname=XLIB_SLDWORKSRMXINSTALLER_ZIP_FILE \
# 		--namesubstring='SolidWorksRMX' --buildNumber=${BUILD_NUMBER}
# 	source ${NLBUILDROOT}/build.config.sldworksrmxinstaller
# fi

# if [ "$XLIB_AUTOCADRMXINSTALLER_ZIP_FILE" == "" ]; then
# 	rm -f ${NLBUILDROOT}/build.config.autocadrmxinstaller
# 	perl $NLBUILDROOT/build/getNewestProductBuildArtifactFile.pl \
# 		--startpath=${REPOSITORY_ROOT}/Teamcenter/RightsManagementExtension/CADRMXInstaller/${VERSION_STR} \
# 		--outfile=${NLBUILDROOT}/build.config.autocadrmxinstaller --varname=XLIB_AUTOCADRMXINSTALLER_ZIP_FILE \
# 		--namesubstring='AutoCADRMX' --buildNumber=${BUILD_NUMBER}
# 	source ${NLBUILDROOT}/build.config.autocadrmxinstaller
# fi

# Find FIPS Java SDK package
XLIB_FIPS_JAVASDK_ZIP_FILE=s:/releases/SecureCollaboration/2021.09-FIPS.69/RMSERVERSDK-2021.09-0069-202112011853-build.zip
if [ "$XLIB_FIPS_JAVASDK_ZIP_FILE" == "" ]; then
	rm -f ${NLBUILDROOT}/build.config.fipsjavasdk
	perl $NLBUILDROOT/scripts/getNewestProductBuildArtifactFile.pl \
		--startpath=S:/build/custom/SecureCollaboration/2021.09 \
		--outfile=${NLBUILDROOT}/build.config.fipsjavasdk --varname=XLIB_FIPS_JAVASDK_ZIP_FILE \
		--namesubstring='RMSERVERSDK'
	source ${NLBUILDROOT}/build.config.fipsjavasdk
fi

# Find RMD/RPM package
#XLIB_RMD_RPM_ZIP_FILE=s:/build/release_candidate/SkyDRM-Desktop-For-Windows/${SKYDRM_DESKTOP_MAJOR_VER}.${SKYDRM_DESKTOP_MINOR_VER}/${SKYDRM_DESKTOP_BUILD_NUMBER}/SkyDRM-Desktop-for-Windows-64-2022.01.1241-202201201928.zip
XLIB_RMD_RPM_ZIP_FILE=s:/releases/SkyDRM/Desktop-For-Windows/${SKYDRM_DESKTOP_MAJOR_VER}.${SKYDRM_DESKTOP_MINOR_VER}.${SKYDRM_DESKTOP_BUILD_NUMBER}/SkyDRM-Desktop-for-Windows-64-2022.01.1241-202201201928.zip
if [ "$XLIB_RMD_RPM_ZIP_FILE" == "" ]; then
	rm -f ${NLBUILDROOT}/build.config.rmdrpm
	perl $NLBUILDROOT/build/getNewestProductBuildArtifactFile.pl \
		--startpath=${REPOSITORY_ROOT}/SkyDRM-Desktop-For-Windows/${SKYDRM_DESKTOP_MAJOR_VER}.${SKYDRM_DESKTOP_MINOR_VER} \
		--outfile=${NLBUILDROOT}/build.config.rmdrpm --varname=XLIB_RMD_RPM_ZIP_FILE \
		--buildnumber=${SKYDRM_DESKTOP_BUILD_NUMBER} --namesubstring='SkyDRM-Desktop'
	source ${NLBUILDROOT}/build.config.rmdrpm
fi

#
# Generate build.config
#

# Write file

(
cat <<EOT
#!/bin/bash
#
# Description
#	This script contains variable to be used by ./buildAll script. It can also be used to
#	setup the environment for manual compilation. It is especially useful for partial
#	rebuilding after fixing compilation problem or incremental build after bug fix.
#
# WARNING
#	This file is generated by ./configure. You may edit this file for debugging because
#	changes will be overriden when ./configure is run.

export CONFIG_TYPE=$CONFIG_TYPE
export PRODUCT_NAME=$PRODUCT_NAME
export VERSION_STR=$VERSION_STR
export BUILD_NUMBER=$BUILD_NUMBER
export VERSION_BUILD=$VERSION_BUILD
export VERSION_BUILD_SHORT=$VERSION_BUILD_SHORT
export BUILDTYPE=$BUILDTYPE
export BUILD_DATE=$BUILD_DATE
export BUILD_DATE_LONG=$BUILD_DATE_LONG
export PREFAST=$PREFAST
export OFFICIALCERT=$OFFICIALCERT
export PACKAGE_NAME=$PACKAGE_NAME

export REPOSITORY_ROOT=$REPOSITORY_ROOT

export XLIB_CUSTOMIZED_MENU_ITEM_ZIP_FILE=$XLIB_CUSTOMIZED_MENU_ITEM_ZIP_FILE
export XLIB_AWCONESTEPCOMMANDS_ZIP_FILE=$XLIB_AWCONESTEPCOMMANDS_ZIP_FILE
export XLIB_BATCHPROTECT_ZIP_FILE=$XLIB_BATCHPROTECT_ZIP_FILE
export XLIB_DISPATCHER_ZIP_FILE=$XLIB_DISPATCHER_ZIP_FILE
export XLIB_TEMPLATEMODIFIER_ZIP_FILE=$XLIB_TEMPLATEMODIFIER_ZIP_FILE
export XLIB_TRANSLATOR_ZIP_FILE=$XLIB_TRANSLATOR_ZIP_FILE
export XLIB_NXLAUTOPROTECT_ZIP_FILE=$XLIB_NXLAUTOPROTECT_ZIP_FILE
export XLIB_NXLAUTOPROTECT_LINUX_ZIP_FILE=$XLIB_NXLAUTOPROTECT_LINUX_ZIP_FILE
export XLIB_NXLOVERLAY_ZIP_FILE=$XLIB_NXLOVERLAY_ZIP_FILE
export XLIB_LDIFGENERATOR_ZIP_FILE=$XLIB_LDIFGENERATOR_ZIP_FILE
export XLIB_RACRMX_ZIP_FILE=$XLIB_RACRMX_ZIP_FILE
export XLIB_FMS_RMX_ZIP_FILE=$XLIB_FMS_RMX_ZIP_FILE
export XLIB_PARTIALDOWNLOAD_CLIENT_ZIP_FILE=$XLIB_PARTIALDOWNLOAD_CLIENT_ZIP_FILE
export XLIB_PARTIALDOWNLOAD_SERVER_ZIP_FILE=$XLIB_PARTIALDOWNLOAD_SERVER_ZIP_FILE
export XLIB_TRANSRIGHTSCHECKER_ZIP_FILE=$XLIB_TRANSRIGHTSCHECKER_ZIP_FILE
export XLIB_SCFINTEGRATION_ZIP_FILE=$XLIB_SCFINTEGRATION_ZIP_FILE
export XLIB_BBINTEGRATION_ZIP_FILE=$XLIB_BBINTEGRATION_ZIP_FILE
export XLIB_BBPLUGIN_ZIP_FILE=$XLIB_BBPLUGIN_ZIP_FILE
export XLIB_FIPS_JAVASDK_ZIP_FILE=$XLIB_FIPS_JAVASDK_ZIP_FILE
export XLIB_RMD_RPM_ZIP_FILE=$XLIB_RMD_RPM_ZIP_FILE

export NLBUILDROOT=$NLBUILDROOT
export NLEXTERNALDIR=$NLEXTERNALDIR
export NLEXTERNALDIR2=$NLEXTERNALDIR2
export TC_REPOSITORY_ROOT=$TC_REPOSITORY_ROOT

EOT
) > build.config

# Print content of build.config
echo ""
echo "INFO: build.config"

cat build.config


#
# Generate build/build.properties
#

# Write file

rm -f build/build.properties
(
cat <<EOT
# ---------------------------------------------------------------------------
# Configurable build properties
#
# Description:
#	The properties in this file are configurable properties. They should be updated
#	according to the environment and release version. The properties should are used
#	by build_xlib.xml, build_compile.xml and build_publish.xml. This property file
#	should contain all the properties to run any of these Ant scripts. If any
#	configurable property is missing, it should be added to this script.
#
#	Note that this script should not contain any property that acts a local variable
#	to a build.xml file. Those should be specified in the build.xml file using
#	<properties> tag.
#
#	For developer:
#       rm -f build a source ${NLBUILDROOT}/ee, you should be able to build after updating this file.
#		The values specified in this property file need to be adjusted in order for
#		you to compile code in you development environment using build_compile.xml.
#		Since this property file contains all configurable properties needed to
#		build a source ${NLBUILDROOT}/ee, you should be able to build after updating this file.
#		You may compile using compileIt.bat or run Ant at a command prompt.
#
#	For build machine:
#		To perform scripted build, we may generate this build.properties file
#		on-the-fly or use Ant commandline to override the properties. Ant commandline
#		can be specified through environment varibale ANT_ARGS. In either case, specify
#       rm -f Source ${NLBUILDROOT}/d libraries
#		-D<name>=<value> to override a property.
# ---------------------------------------------------------------------------

# Source ${NLBUILDROOT}/d libraries
nlbuildroot=$NLBUILDROOT
nlexternaldir=$NLEXTERNALDIR
nlexternaldir2=$NLEXTERNALDIR2
tc_repository_root=$TC_REPOSITORY_ROOT

# Xlib (Dependencies from AWC one-step commands, MenuItem, dispatcher and translator)
xlib_CustomizedMenuItem_build_artifacts_zip_file=$XLIB_CUSTOMIZED_MENU_ITEM_ZIP_FILE
xlib_AWCOneStepCommands_build_artifacts_zip_file=$XLIB_AWCONESTEPCOMMANDS_ZIP_FILE
xlib_BatchProtect_build_artifacts_zip_file=$XLIB_BATCHPROTECT_ZIP_FILE
xlib_Translator_build_artifacts_zip_file=$XLIB_TRANSLATOR_ZIP_FILE
xlib_NxlAutoProtect_build_artifacts_zip_file=$XLIB_NXLAUTOPROTECT_ZIP_FILE
xlib_SCFIntegration_build_artifacts_zip_file=$XLIB_SCFINTEGRATION_ZIP_FILE
xlib_BBIntegration_build_artifacts_zip_file=$XLIB_BBINTEGRATION_ZIP_FILE
xlib_BBPlugin_build_artifacts_zip_file=$XLIB_BBPLUGIN_ZIP_FILE
xlib_NxlAutoProtect_linux_build_artifacts_zip_file=$XLIB_NXLAUTOPROTECT_LINUX_ZIP_FILE
xlib_NXLOverlay_build_artifacts_zip_file=$XLIB_NXLOVERLAY_ZIP_FILE
xlib_ldifgenerator_build_artifacts_zip_file=$XLIB_LDIFGENERATOR_ZIP_FILE
xlib_TemplateModifier_build_artifacts_zip_file=$XLIB_TEMPLATEMODIFIER_ZIP_FILE
xlib_Dispatcher_build_artifacts_zip_file=$XLIB_DISPATCHER_ZIP_FILE
xlib_RACRMX_build_artifacts_zip_file=$XLIB_RACRMX_ZIP_FILE
xlib_FMS_RMX_build_artifacts_zip_file=$XLIB_FMS_RMX_ZIP_FILE
xlib_PartialDownload_client_build_artifacts_zip_file=$XLIB_PARTIALDOWNLOAD_CLIENT_ZIP_FILE
xlib_PartialDownload_server_build_artifacts_zip_file=$XLIB_PARTIALDOWNLOAD_SERVER_ZIP_FILE
xlib_TranslatorRightsChecker_build_artifacts_zip_file=$XLIB_TRANSRIGHTSCHECKER_ZIP_FILE
xlib_FIPSJavaSDK_build_artifacts_zip_file=$XLIB_FIPS_JAVASDK_ZIP_FILE
xlib_RMDRPM_build_artifacts_zip_file=$XLIB_RMD_RPM_ZIP_FILE

# Build variables
product_name="Rights Management eXtension"
package_name=RightsManagementExtension
version_str=$VERSION_STR
build_number=$BUILD_NUMBER
version_build_short=
build_date_long=$BUILD_DATE_LONG
repository_root=$REPOSITORY_ROOT
EOT
) > build/build.properties

# Print content of build/build.properties
echo ""
echo "INFO: build/build.properties"

cat build/build.properties
